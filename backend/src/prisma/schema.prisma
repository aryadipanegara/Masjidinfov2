// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(uuid()) // UUID lebih aman
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?   // Foto profil user
  role          Role      @default(USER)
  refreshToken  String?   // Simpan refresh token di sini
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[] // Relasi ke Account (OAuth)
  sessions      Session[] // Relasi ke Session (NextAuth/session-based)
  posts         Post[]    // Relasi ke Post
  comments      Comment[] // Relasi ke Comment
}

model Account {
  id                String  @id @default(uuid()) 
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          String  // "credentials" atau "google", "github", dll.
  providerAccountId String  // ID dari provider (misal: Google UID, GitHub ID)
  access_token      String?
  expires_at        Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String   @unique // Email user
  token      String   @unique // Token verifikasi email
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String   @id @default(uuid())
  title      String   @db.Text
  image      String?
  slug       String   @unique
  desc       String?
  content    String   @db.Text
  isFeatured Boolean  @default(false)
  visit      Int      @default(0)
  status     String   @default("draft") // draft, published, archived
  userId     String   
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments   Comment[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([status])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  desc      String   @db.Text
  userId    String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?  
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}
