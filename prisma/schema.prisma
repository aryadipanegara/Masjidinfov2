// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ---------------- ENUMS ----------------
enum PostType {
  masjid
  artikel
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  VIEWER
}

enum OTPPurpose {
  REGISTER
  FORGOT_PASSWORD
  CHANGE_EMAIL
}

// ---------------- MODELS ----------------

model User {
  id               String           @id @default(ulid())
  email            String           @unique
  fullname         String
  passwordHash     String?
  isVerified       Boolean          @default(false)
  isBanned         Boolean          @default(false)
  bannedAt         DateTime?
  bannedReason     String?
  role             UserRole         @default(VIEWER)
  avatar           String?
  hasGoogleAccount Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  posts            Post[]           @relation("userPosts")
  otpVerifications OTPVerification[] @relation("otpVerifications")
  accounts         Account[]        @relation("userAccounts")
  sessions         Session[]        @relation("userPrismaSessions")
  userSessions     UserSession[]    @relation("userSessions")

  @@index([email])
  @@index([hasGoogleAccount])
  @@map("user")
}

model Account {
  id                   String    @id @default(ulid())
  userId               String    @map("user_id")
  type                 String    @map("type")
  provider             String    @map("provider")
  providerAccountId    String    @map("provider_account_id")
  refreshToken         String?   @map("refresh_token")
  accessToken          String?   @map("access_token")
  expiresAt            Int?      @map("expires_at")
  tokenType            String?   @map("token_type")
  scope                String?   @map("scope")
  idToken              String?   @map("id_token")
  sessionState         String?   @map("session_state")
  isBanned             Boolean   @default(false) @map("is_banned")
  bannedAt             DateTime? @map("banned_at")
  bannedReason         String?   @map("banned_reason")

  user                 User      @relation("userAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(ulid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @map("expires")

  user         User     @relation("userPrismaSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model OTPVerification {
  id         String     @id @default(ulid())
  userId     String     @map("user_id")
  code       String     @map("code")
  purpose    OTPPurpose @map("purpose")
  expiresAt  DateTime   @map("expires_at")
  isUsed     Boolean    @default(false) @map("is_used")
  createdAt  DateTime   @default(now()) @map("created_at")

  user       User       @relation("otpVerifications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_verification")
}

model UserSession {
  id        String   @id @default(ulid())
  userId    String   @map("user_id")
  ip        String   @map("ip")
  userAgent String   @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation("userSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_session")
}

// ---------------- CONTENT MODELS ----------------

model Post {
  id          String        @id @default(ulid())
  type        PostType      @map("type")
  title       String        @map("title")
  slug        String        @unique @map("slug")
  excerpt     String?       @map("excerpt")
  content     String        @db.Text @map("content")
  coverImage  String?       @map("cover_image")
  tags        String[]      @map("tags")
  publishedAt DateTime      @default(now()) @map("published_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  isDeleted   Boolean       @default(false) @map("is_deleted")

  authorId    String        @map("author_id")
  author      User          @relation("userPosts", fields: [authorId], references: [id], onDelete: Restrict)

  categories  PostCategory[]
  images      Image[]
  masjidInfo  Masjid?

  @@map("post")
}

model PostCategory {
  postId     String   @map("post_id")
  categoryId String   @map("category_id")

  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("post_category")
}

model Category {
  id     String          @id @default(ulid())
  name   String          @unique @map("name")

  posts  PostCategory[]

  @@map("category")
}

model Image {
  id         String   @id @default(ulid())
  url        String   @map("url")
  altText    String?  @map("alt_text")
  caption    String?  @map("caption")
  order      Int      @default(0) @map("order")
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  postId     String?  @map("post_id")
  post       Post?    @relation(fields: [postId], references: [id], onDelete: SetNull)

  @@map("image")
}

model Masjid {
  id            String   @id @default(ulid())
  postId        String   @unique @map("post_id")

  namaLokal     String?  @map("nama_lokal")
  alamat        String?  @map("alamat")
  kota          String?  @map("kota")
  provinsi      String?  @map("provinsi")
  negara        String?  @map("negara")
  tahunDibangun String?  @map("tahun_dibangun")
  arsitek       String?  @map("arsitek")
  gaya          String?  @map("gaya")
  mapsUrl       String?  @map("maps_url")
  sumberFoto    String?  @map("sumber_foto")

  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("masjid")
}