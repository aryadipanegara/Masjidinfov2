// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Tipe konten: masjid vs cerita
enum PostType {
  masjid
  cerita
}

/// Role user
enum UserRole {
  admin
  editor
  viewer
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  image     String?
  role      UserRole @default(viewer)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Post[]
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique

  posts PostCategory[]
}

model PostCategory {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String   @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @db.Uuid

  @@id([postId, categoryId])
}

model Post {
  id          String   @id @default(uuid()) @db.Uuid
  type        PostType
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  coverImage  String?
  tags        String[]
  publishedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  authorId String @db.Uuid
  author   User   @relation(fields: [authorId], references: [id], onDelete: Restrict)

  categories PostCategory[]
  images     Image[]
}

model Image {
  id         String   @id @default(uuid()) @db.Uuid
  url        String
  altText    String?
  caption    String?
  order      Int      @default(0)
  uploadedAt DateTime @default(now())

  postId String? @db.Uuid
  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)
}
